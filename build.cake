#tool "nuget:?package=WiX.Toolset"

//////////////////////////////////////////////////////////////////////
// ARGUMENTS
//////////////////////////////////////////////////////////////////////

var target = Argument("target", "Default");
var configuration = Argument("configuration", "Release");

//////////////////////////////////////////////////////////////////////
// BUILD TASKS
//////////////////////////////////////////////////////////////////////

Task("Clean")
    .Does(() =>
{
    MSBuild("./spectator.sln", settings =>
        settings.WithTarget("Clean"));
    CleanDirectories("./output");
});

Task("Restore-NuGet-Packages")
    .IsDependentOn("Clean")
    .Does(() =>
{
    NuGetRestore("./spectator.sln");
});

Task("Build")
    .IsDependentOn("Restore-NuGet-Packages")
    .Does(() =>
{
     MSBuild("./spectator.sln", settings =>
        settings.SetConfiguration(configuration));
});

//////////////////////////////////////////////////////////////////////
// TESTING TARGETS
//////////////////////////////////////////////////////////////////////

Task("Run-Unit-Tests")
    .IsDependentOn("Build")
    .Does(() =>
{
    NUnit3("**/bin/Release/*Tests.dll", new NUnit3Settings {
        NoResults = true
        });
});

//////////////////////////////////////////////////////////////////////
// Package MSI Tasks
//////////////////////////////////////////////////////////////////////

Task("Heat")
  .IsDependentOn("Build")
  .Does(()=>{
    DirectoryPath harvestDirectory = Directory("./spectator/bin/Release");
    var filePath = File("./output/installers/Spectator_files.gen.wxs");
    Information(MakeAbsolute(harvestDirectory).FullPath);
    WiXHeat(harvestDirectory, filePath, 0, new HeatSettings { 
        NoLogo = true,
        ComponentGroupName = "Spectator_Files",
        AutogeneratedGuid = true,
        SuppressCom = true,
        SuppressRegistry = true,
        SuppressFragments = true,
        SuppressRootDirectory = true,
        DirectoryReferenceId = "INSTALLFOLDER",
        PreprocessorVariable = "var.svcfiles" }
        );
  });
Task("Candle")
  .IsDependentOn("Heat")
  .Does(()=>{
   var files = GetFiles("./installers/product.wxs").Union(GetFiles("./output/installers/Spectator_files.gen.wxs"));
   CandleSettings settings = new CandleSettings {
       NoLogo = true,
       Defines = new Dictionary<string, string>(){ {"svcfiles", @"spectator\bin\Release"} },
       OutputDirectory = @"output\installers\",
       EnvironmentVariables = new Dictionary<string, string>(){ {"BUILD_VERSION", EnvironmentVariable("BUILD_VERSION") ?? "1.0.0"}}  //todo get version from some kind of build system like appveyor?


    };
    WiXCandle(files, settings);
  });

Task("Light")
  .IsDependentOn("Candle")
  .Does(()=>{
      LightSettings settings = new LightSettings {
        Defines = new Dictionary<string, string>(){ {"SourceDir", @"spectator\bin\Release"} }, 
        OutputFile = @"output\installers\Spectator.msi",
        NoLogo = true,
        RawArguments = "-sw1076"
        };
    WiXLight("./output/installers/*.wixobj", settings);
  });

//alias for building the msi
  Task("BuildMsi")
     .IsDependentOn("Light");

//////////////////////////////////////////////////////////////////////
// TASK TARGETS
//////////////////////////////////////////////////////////////////////

Task("Default")
    .IsDependentOn("Run-Unit-Tests")
    .IsDependentOn("BuildMsi");


//////////////////////////////////////////////////////////////////////
// EXECUTION
//////////////////////////////////////////////////////////////////////

RunTarget(target);
